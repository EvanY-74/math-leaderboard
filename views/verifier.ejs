<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/style.css">
    <title>Math Leaderboard</title>
</head>
<body>
    <a class="back" href="/account">‚Üê account</a>
    <h1>Verifier Dashboard</h1>
    <hr>
    <main>
        <h2 class="center">Submissions</h2>
        <div>
        <% if (submissions.length > 0) { %>
            <% const maxLength = 20 %>
            <ul id="submissions">
                <% for (const submission of submissions) { %>
                    <li><%= submission.answer %> - <strong><%= submission.username %></strong>, <%= (new Date(submission.timeSubmitted)).toLocaleDateString(undefined, { month: 'short', day: 'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric' }) %></li>
                    <label><a href="<%= submission.proofLink %>"><%= submission.proofLink.length > maxLength ? submission.proofLink.slice(0, maxLength - 3) + '...' : submission.proofLink %></a></label>
                    <span style="display: none"><%= submission.id %></span>
                    <br>
                    <button class="green" <%= submission.hasVoted ? 'disabled' : '' %>>approve<%= submission.approved.length == 0 ? '' : ` (${submission.approved.length})` %></button>
                    <button class="red" <%= submission.hasVoted ? 'disabled' : '' %>>reject<%= submission.rejected.length == 0 ? '' : ` (${submission.rejected.length})` %></button>
                <% } %>
            </ul>
        <% } else { %>
            <p>No new submissions</p>
        <% } %>
        </div>
        <section id="chat">
            <article id="messages"></article>
            <div>
                <input type="text" id="messageInput" style="width: 100%" placeholder="message">
                <button onclick="sendMessage()">Send</button>
            </div>
        </section>
    </main>
    <!-- <script src="/socket.io/socket.io.js"></script> -->
    <script src="https://cdn.socket.io/4.8.1/socket.io.min.js"></script>
    <script>
        const socket = io();
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.querySelector('button');
        const messages = document.getElementById('messages');

        document.querySelectorAll('ul button').forEach(element => element.addEventListener('click', async e => {
            try {
                const id = e.target.parentElement.querySelector('span').innerHTML;
                const approving = [...e.target.classList].includes('green');
                console.log(id, [...e.target.classList].includes('green'))
                const response = await fetch(location.href, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ id, approving }),
                });


                if (response.redirected) {
                    location.href = response.url;
                } else if (response.ok) {
                    console.log('hi')
                    const data = await response.json();
                    if (data.error) return console.error(data.error);
                    socket.emit('vote', { room, id, approving });
                    e.target.parentElement.querySelectorAll('button').forEach(button => button.disabled = true);
                }
            } catch (error) {
                console.error(error);
            }
        }));

        socket.emit('join_room', location.pathname.split('/').at(-1));
        const room = location.pathname.split('/').at(-1);

        socket.on('join_room_response', chatHistory => {
            if (!chatHistory) return;
            chatHistory.forEach(message => renderMessage(message));
        });

        // socket.on('message', message => {
        //     renderMessage(message);
        // });
        socket.on('message', renderMessage);

        function renderMessage(packet) {
            let { username, message, timestamp } = packet;

            const div = document.createElement('div');
            const label = document.createElement('label');
            label.innerHTML = username;
            const p = document.createElement('p');
            p.innerHTML = message;
            if (username == 'you') {
                label.classList.add('you');
                p.classList.add('you');
            }
            const time = document.createElement('time');
            time.innerHTML = (new Date(timestamp)).toLocaleDateString(undefined, { month: 'short', day: 'numeric', hour: 'numeric', minute: 'numeric' });
            div.appendChild(label);
            div.appendChild(p);
            div.appendChild(time);
            messages.appendChild(div);
        }

        socket.on('vote', packet => {
            const { id, approving } = packet;
            const elements = document.querySelectorAll('#submissions > div');
            if (!elements) return;
            // add 1 to approve or reject
            for (const element of elements) {
                if (element.querySelector('span').innerHTML != id) continue;
                const button = element.querySelector(approving ? '.green' : '.red');
                console.log(button);
                const splitStr = button.innerHTML.split(' ');
                button.innerHTML = splitStr[0] + (splitStr.length == 1 ? ' (1)' : ` (${parseInt(splitStr[1].slice(1, -1)) + 1})`);
                break;
            }
        });

        function sendMessage() {
            socket.emit('message', { room, message: messageInput.value });
            renderMessage({ username: 'you', message: messageInput.value, timestamp: new Date() });
            messageInput.value = '';
        }

        messageInput.addEventListener('keyup', e => {
            if (e.key == 'Enter') sendMessage();
        });

        socket.on('error', (message) => {
            console.error(message);
        });

        socket.on('disconnect', () => {
            console.error('Server disconnected');
        })
    </script>
</body>
</html>